// Performance Monitoring Dashboard API
// Generated by Database Agent (Alex)

import { NextRequest, NextResponse } from 'next/server';
import { requirePermission } from '@/lib/middleware/auth-utils';
import { performanceMonitor } from '@/lib/monitoring/performance-monitor';
import { getDatabaseHealth } from '@/lib/utils/connection-pool';

/**
 * GET /api/performance/dashboard
 * Get comprehensive performance dashboard data
 */
@requirePermission('admin', 'read')
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const hours = parseInt(searchParams.get('hours') || '24');

    // Validate time range
    if (hours < 1 || hours > 168) { // Max 1 week
      return NextResponse.json(
        { error: 'Hours must be between 1 and 168' },
        { status: 400 }
      );
    }

    // Get performance data
    const [performanceReport, databaseHealth, realtimeMetrics] = await Promise.all([
      performanceMonitor.generatePerformanceReport(hours),
      getDatabaseHealth(),
      performanceMonitor.getRealtimeMetrics()
    ]);

    const dashboardData = {
      timestamp: new Date(),
      timeRange: hours,
      performance: performanceReport,
      health: databaseHealth,
      realtime: realtimeMetrics
    };

    return NextResponse.json(dashboardData);

  } catch (error) {
    console.error('Performance dashboard error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch performance dashboard data' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/performance/dashboard/test
 * Run comprehensive performance tests
 */
@requirePermission('admin', 'write')
export async function POST(request: NextRequest) {
  try {
    console.log('üèÉ‚Äç‚ôÇÔ∏è Starting performance test suite...');

    const testResults = await performanceMonitor.runPerformanceTests();

    return NextResponse.json({
      success: true,
      results: testResults,
      timestamp: new Date()
    });

  } catch (error) {
    console.error('Performance test error:', error);
    return NextResponse.json(
      { error: 'Failed to run performance tests' },
      { status: 500 }
    );
  }
}