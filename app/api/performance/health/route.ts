// Database Health Check API
// Generated by Database Agent (Alex)

import { NextRequest, NextResponse } from 'next/server';
import { getDatabaseHealth, connectionPool } from '@/lib/utils/connection-pool';
import { performanceMonitor } from '@/lib/monitoring/performance-monitor';

/**
 * GET /api/performance/health
 * Get database and system health status
 */
export async function GET(request: NextRequest) {
  try {
    const health = await getDatabaseHealth();
    const realtime = performanceMonitor.getRealtimeMetrics();

    // Determine overall health status
    let overallStatus = 'healthy';

    if (!health.database.healthy) {
      overallStatus = 'critical';
    } else if (
      health.database.responseTime && health.database.responseTime > 500 ||
      realtime.averageResponseTime > 500 ||
      (health.database.utilizationRate && health.database.utilizationRate > 90)
    ) {
      overallStatus = 'warning';
    }

    const healthResponse = {
      status: overallStatus,
      timestamp: new Date(),
      database: health.database,
      cache: health.cache,
      realtime: realtime,
      environment: process.env.NODE_ENV,
      uptime: process.uptime()
    };

    // Set appropriate HTTP status based on health
    const httpStatus = overallStatus === 'critical' ? 503 : 200;

    return NextResponse.json(healthResponse, { status: httpStatus });

  } catch (error) {
    console.error('Health check error:', error);

    return NextResponse.json({
      status: 'critical',
      timestamp: new Date(),
      error: 'Health check failed',
      details: (error as Error).message
    }, { status: 503 });
  }
}

/**
 * GET /api/performance/health/detailed
 * Get detailed health information including database statistics
 */
export async function detailed(request: NextRequest) {
  try {
    const [health, poolStatus] = await Promise.all([
      getDatabaseHealth(),
      connectionPool.getPoolStatus()
    ]);

    const detailedHealth = {
      timestamp: new Date(),
      database: {
        ...health.database,
        poolStatus: poolStatus
      },
      cache: health.cache,
      system: {
        nodeVersion: process.version,
        platform: process.platform,
        memory: {
          used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
          total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),
          external: Math.round(process.memoryUsage().external / 1024 / 1024)
        },
        uptime: process.uptime(),
        loadAverage: process.loadavg ? process.loadavg() : null
      },
      environment: {
        nodeEnv: process.env.NODE_ENV,
        databaseUrl: process.env.DATABASE_URL ? '[CONFIGURED]' : '[MISSING]',
        maxConnections: process.env.DB_MAX_CONNECTIONS || '[DEFAULT]'
      }
    };

    return NextResponse.json(detailedHealth);

  } catch (error) {
    console.error('Detailed health check error:', error);
    return NextResponse.json(
      { error: 'Failed to get detailed health information' },
      { status: 500 }
    );
  }
}