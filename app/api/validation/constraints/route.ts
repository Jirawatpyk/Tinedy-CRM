// Database Constraints Validation API
// Generated by Database Agent (Alex)

import { NextRequest, NextResponse } from 'next/server';
import { requirePermission } from '@/lib/middleware/auth-utils';
import { ConstraintValidator, checkReferentialIntegrity } from '@/lib/validation/database-constraints';

/**
 * GET /api/validation/constraints
 * Check database constraints and referential integrity
 */
@requirePermission('admin', 'read')
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const checkType = searchParams.get('type') || 'all';

    let results: any = {
      timestamp: new Date(),
      checkType
    };

    switch (checkType) {
      case 'referential':
        results.referentialIntegrity = await checkReferentialIntegrity();
        break;

      case 'all':
      default:
        results.referentialIntegrity = await checkReferentialIntegrity();
        // Add other constraint checks here as needed
        break;
    }

    // Calculate overall status
    const hasIssues = results.referentialIntegrity && !results.referentialIntegrity.valid;
    results.summary = {
      valid: !hasIssues,
      totalIssues: results.referentialIntegrity?.issues?.length || 0,
      criticalIssues: results.referentialIntegrity?.issues?.filter((issue: any) =>
        issue.invalidReferences > 0
      ).length || 0
    };

    return NextResponse.json(results);

  } catch (error) {
    console.error('Constraint validation error:', error);
    return NextResponse.json(
      { error: 'Failed to check database constraints' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/validation/constraints/entity
 * Validate constraints for specific entity
 */
@requirePermission('admin', 'write')
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { entityType, data, context } = body;

    if (!entityType || !data) {
      return NextResponse.json(
        { error: 'entityType and data are required' },
        { status: 400 }
      );
    }

    // Validate supported entity types
    const supportedTypes = ['customer', 'job', 'user', 'qualityCheck', 'qualityChecklist', 'trainingWorkflow', 'webhookLog', 'auditLog'];
    if (!supportedTypes.includes(entityType)) {
      return NextResponse.json(
        { error: `Unsupported entity type: ${entityType}` },
        { status: 400 }
      );
    }

    const validation = await ConstraintValidator.validateAll(
      entityType as any,
      data,
      context
    );

    return NextResponse.json({
      valid: validation.valid,
      errors: validation.errors,
      timestamp: new Date()
    });

  } catch (error) {
    console.error('Entity constraint validation error:', error);
    return NextResponse.json(
      { error: 'Failed to validate entity constraints' },
      { status: 500 }
    );
  }
}