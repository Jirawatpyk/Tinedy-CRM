// Schema Validation API Endpoints
// Generated by Database Agent (Alex)

import { NextRequest, NextResponse } from 'next/server';
import { requirePermission } from '@/lib/middleware/auth-utils';
import { runSchemaValidation } from '@/lib/validation/schema-validator';
import { generateConstraintReport } from '@/lib/validation/database-constraints';
import { DataTypeValidator } from '@/lib/validation/data-type-validator';

/**
 * GET /api/validation/schema
 * Run comprehensive schema validation
 */
@requirePermission('admin', 'read')
export async function GET(request: NextRequest) {
  try {
    console.log('üîç Running comprehensive schema validation...');

    const [schemaValidation, constraintReport] = await Promise.all([
      runSchemaValidation(),
      generateConstraintReport()
    ]);

    const response = {
      timestamp: new Date(),
      schema: schemaValidation,
      constraints: constraintReport,
      summary: {
        overallValid: schemaValidation.valid && constraintReport.summary.referentialIntegrityIssues === 0,
        totalIssues: (
          schemaValidation.summary.dataConsistencyIssues +
          constraintReport.summary.referentialIntegrityIssues
        ),
        criticalIssues: constraintReport.summary.referentialIntegrityIssues,
        recommendations: [
          ...schemaValidation.details.recommendations,
          ...constraintReport.details.recommendations
        ]
      }
    };

    return NextResponse.json(response);

  } catch (error) {
    console.error('Schema validation error:', error);
    return NextResponse.json(
      { error: 'Failed to run schema validation' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/validation/schema/entity
 * Validate specific entity data
 */
@requirePermission('admin', 'write')
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { entityType, data, options } = body;

    if (!entityType || !data) {
      return NextResponse.json(
        { error: 'entityType and data are required' },
        { status: 400 }
      );
    }

    // Validate supported entity types
    const supportedTypes = ['customer', 'job', 'user', 'qualityCheck', 'trainingWorkflow', 'webhookLog'];
    if (!supportedTypes.includes(entityType)) {
      return NextResponse.json(
        { error: `Unsupported entity type: ${entityType}` },
        { status: 400 }
      );
    }

    const validation = await DataTypeValidator.validateComplete(
      entityType,
      data,
      options
    );

    return NextResponse.json({
      valid: validation.valid,
      data: validation.data,
      errors: validation.errors,
      timestamp: new Date()
    });

  } catch (error) {
    console.error('Entity validation error:', error);
    return NextResponse.json(
      { error: 'Failed to validate entity data' },
      { status: 500 }
    );
  }
}