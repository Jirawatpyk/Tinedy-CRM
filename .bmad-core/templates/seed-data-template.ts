// Seed Data Template for Tinedy CRM
// File: prisma/seed.ts

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting seed data generation for Tinedy CRM...');

  try {
    // =======================================================================
    // CLEAN EXISTING DATA (Development only)
    // =======================================================================
    if (process.env.NODE_ENV === 'development') {
      console.log('üßπ Cleaning existing data...');

      // Delete in reverse order of dependencies
      await prisma.qualityCheck.deleteMany();
      await prisma.trainingWorkflow.deleteMany();
      await prisma.job.deleteMany();
      await prisma.customer.deleteMany();
      await prisma.qualityChecklist.deleteMany();
      await prisma.user.deleteMany();
      await prisma.webhookLog.deleteMany();

      console.log('‚úÖ Existing data cleaned');
    }

    // =======================================================================
    // CREATE USERS
    // =======================================================================
    console.log('üë• Creating users...');

    const adminUser = await prisma.user.create({
      data: {
        id: 'admin-001',
        email: 'admin@tinedy.com',
        name: 'Admin User',
        role: 'ADMIN',
        isActive: true,
      },
    });

    const operationsUsers = await Promise.all([
      prisma.user.create({
        data: {
          id: 'ops-001',
          email: 'operations1@tinedy.com',
          name: 'Operations Staff 1',
          role: 'OPERATIONS',
          isActive: true,
        },
      }),
      prisma.user.create({
        data: {
          id: 'ops-002',
          email: 'operations2@tinedy.com',
          name: 'Operations Staff 2',
          role: 'OPERATIONS',
          isActive: true,
        },
      }),
    ]);

    const trainingUser = await prisma.user.create({
      data: {
        id: 'training-001',
        email: 'training@tinedy.com',
        name: 'Training Specialist',
        role: 'TRAINING',
        isActive: true,
      },
    });

    const qcUser = await prisma.user.create({
      data: {
        id: 'qc-001',
        email: 'qc@tinedy.com',
        name: 'QC Manager',
        role: 'QC_MANAGER',
        isActive: true,
      },
    });

    console.log(`‚úÖ Created ${1 + operationsUsers.length + 2} users`);

    // =======================================================================
    // CREATE CUSTOMERS
    // =======================================================================
    console.log('üè¢ Creating customers...');

    const customers = await Promise.all([
      prisma.customer.create({
        data: {
          id: 'customer-001',
          lineUserId: 'U1234567890abcdef',
          name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ABC ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
          phone: '+66-2-123-4567',
          email: 'contact@abc-company.com',
          address: '123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
          notes: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ VIP - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©',
          status: 'ACTIVE',
        },
      }),
      prisma.customer.create({
        data: {
          id: 'customer-002',
          lineUserId: 'U0987654321fedcba',
          name: '‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô XYZ',
          phone: '+66-2-987-6543',
          email: 'info@xyz-partnership.com',
          address: '456 ‡∏ñ‡∏ô‡∏ô‡∏û‡∏´‡∏•‡πÇ‡∏¢‡∏ò‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10400',
          status: 'ACTIVE',
        },
      }),
      prisma.customer.create({
        data: {
          id: 'customer-003',
          lineUserId: 'U1122334455667788',
          name: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏•‡∏µ‡∏Å DEF',
          phone: '+66-81-555-1234',
          email: 'owner@def-retail.com',
          address: '789 ‡∏ã‡∏≠‡∏¢‡∏£‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏´‡∏á ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10310',
          notes: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
          status: 'ACTIVE',
        },
      }),
      prisma.customer.create({
        data: {
          id: 'customer-004',
          lineUserId: 'U9988776655443322',
          name: '‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô GHI ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°',
          phone: '+66-2-444-5555',
          email: 'factory@ghi-industrial.com',
          address: '321 ‡∏ñ‡∏ô‡∏ô‡∏Å‡∏¥‡πà‡∏á‡πÅ‡∏Å‡πâ‡∏ß ‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£ 10540',
          status: 'INACTIVE',
        },
      }),
    ]);

    console.log(`‚úÖ Created ${customers.length} customers`);

    // =======================================================================
    // CREATE QUALITY CHECKLISTS
    // =======================================================================
    console.log('üìã Creating quality checklists...');

    const checklists = await Promise.all([
      prisma.qualityChecklist.create({
        data: {
          id: 'checklist-standard',
          name: '‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
          description: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó',
          items: [
            { item: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', required: true },
            { item: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', required: true },
            { item: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô', required: true },
            { item: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', required: true },
            { item: '‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', required: false },
          ],
          isActive: true,
        },
      }),
      prisma.qualityChecklist.create({
        data: {
          id: 'checklist-premium',
          name: '‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°',
          description: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ VIP ‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©',
          items: [
            { item: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', required: true },
            { item: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', required: true },
            { item: '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©', required: true },
            { item: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô Premium', required: true },
            { item: '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î', required: true },
            { item: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', required: true },
            { item: '‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', required: true },
            { item: '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', required: false },
          ],
          isActive: true,
        },
      }),
      prisma.qualityChecklist.create({
        data: {
          id: 'checklist-training',
          name: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°',
          description: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°',
          items: [
            { item: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°', required: true },
            { item: '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°', required: true },
            { item: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£', required: true },
            { item: '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°', required: true },
            { item: '‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£', required: false },
          ],
          isActive: true,
        },
      }),
    ]);

    console.log(`‚úÖ Created ${checklists.length} quality checklists`);

    // =======================================================================
    // CREATE JOBS
    // =======================================================================
    console.log('üíº Creating jobs...');

    const jobs = await Promise.all([
      // Completed job
      prisma.job.create({
        data: {
          id: 'job-001',
          customerId: customers[0].id,
          serviceType: '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
          description: '‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£',
          status: 'COMPLETED',
          priority: 'HIGH',
          scheduledAt: new Date('2024-01-15T09:00:00Z'),
          completedAt: new Date('2024-01-15T17:00:00Z'),
          assignedToId: operationsUsers[0].id,
          n8nWorkflowId: 'workflow-123',
          webhookData: {
            source: 'LINE_OA',
            messageId: 'msg-001',
            timestamp: '2024-01-14T10:00:00Z',
          },
        },
      }),

      // In progress job
      prisma.job.create({
        data: {
          id: 'job-002',
          customerId: customers[1].id,
          serviceType: '‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
          description: '‡∏≠‡∏ö‡∏£‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û ISO 9001',
          status: 'IN_PROGRESS',
          priority: 'MEDIUM',
          scheduledAt: new Date('2024-01-20T08:00:00Z'),
          assignedToId: operationsUsers[1].id,
          n8nWorkflowId: 'workflow-124',
          webhookData: {
            source: 'LINE_OA',
            messageId: 'msg-002',
            timestamp: '2024-01-18T14:30:00Z',
          },
        },
      }),

      // New job
      prisma.job.create({
        data: {
          id: 'job-003',
          customerId: customers[2].id,
          serviceType: '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô',
          description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
          status: 'NEW',
          priority: 'MEDIUM',
          scheduledAt: new Date('2024-01-25T10:00:00Z'),
          n8nWorkflowId: 'workflow-125',
          webhookData: {
            source: 'LINE_OA',
            messageId: 'msg-003',
            timestamp: '2024-01-19T11:15:00Z',
          },
        },
      }),

      // High priority job
      prisma.job.create({
        data: {
          id: 'job-004',
          customerId: customers[0].id,
          serviceType: '‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô',
          description: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏∞‡∏ö‡∏ö ERP ‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á',
          status: 'NEW',
          priority: 'URGENT',
          scheduledAt: new Date('2024-01-22T08:00:00Z'),
          n8nWorkflowId: 'workflow-126',
          webhookData: {
            source: 'LINE_OA',
            messageId: 'msg-004',
            timestamp: '2024-01-21T16:45:00Z',
          },
        },
      }),
    ]);

    console.log(`‚úÖ Created ${jobs.length} jobs`);

    // =======================================================================
    // CREATE QUALITY CHECKS
    // =======================================================================
    console.log('‚úÖ Creating quality checks...');

    const qualityChecks = await Promise.all([
      // Completed quality check
      prisma.qualityCheck.create({
        data: {
          id: 'qc-001',
          jobId: jobs[0].id, // Completed job
          checklistId: checklists[1].id, // Premium checklist
          status: 'PASSED',
          completedBy: qcUser.id,
          completedAt: new Date('2024-01-15T18:00:00Z'),
          notes: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡∏°‡∏≤‡∏Å ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
        },
      }),

      // In progress quality check
      prisma.qualityCheck.create({
        data: {
          id: 'qc-002',
          jobId: jobs[1].id, // In progress job
          checklistId: checklists[2].id, // Training checklist
          status: 'IN_PROGRESS',
          notes: '‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°',
        },
      }),

      // Pending quality check
      prisma.qualityCheck.create({
        data: {
          id: 'qc-003',
          jobId: jobs[2].id, // New job
          checklistId: checklists[0].id, // Standard checklist
          status: 'PENDING',
        },
      }),
    ]);

    console.log(`‚úÖ Created ${qualityChecks.length} quality checks`);

    // =======================================================================
    // CREATE TRAINING WORKFLOWS
    // =======================================================================
    console.log('üéì Creating training workflows...');

    const trainingWorkflows = await Promise.all([
      // Completed training
      prisma.trainingWorkflow.create({
        data: {
          id: 'training-001',
          jobId: jobs[0].id, // Completed job
          status: 'COMPLETED',
          documentsReceived: true,
          trainingCompleted: true,
          notes: '‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏î‡∏µ‡∏°‡∏≤‡∏Å',
        },
      }),

      // In progress training
      prisma.trainingWorkflow.create({
        data: {
          id: 'training-002',
          jobId: jobs[1].id, // In progress job
          status: 'TRAINING_IN_PROGRESS',
          documentsReceived: true,
          trainingCompleted: false,
          notes: '‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏° ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤',
        },
      }),
    ]);

    console.log(`‚úÖ Created ${trainingWorkflows.length} training workflows`);

    // =======================================================================
    // CREATE WEBHOOK LOGS
    // =======================================================================
    console.log('üì° Creating webhook logs...');

    const webhookLogs = await Promise.all([
      prisma.webhookLog.create({
        data: {
          id: 'webhook-001',
          source: 'N8N',
          workflowId: 'workflow-123',
          executionId: 'exec-001',
          payload: {
            customer: {
              lineUserId: 'U1234567890abcdef',
              displayName: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ABC ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
              phone: '+66-2-123-4567',
            },
            booking: {
              serviceType: '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
              description: '‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
              priority: 'HIGH',
            },
          },
          status: 'PROCESSED',
          processedAt: new Date('2024-01-14T10:01:00Z'),
          createdJobId: jobs[0].id,
        },
      }),

      prisma.webhookLog.create({
        data: {
          id: 'webhook-002',
          source: 'N8N',
          workflowId: 'workflow-124',
          executionId: 'exec-002',
          payload: {
            customer: {
              lineUserId: 'U0987654321fedcba',
              displayName: '‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô XYZ',
            },
            booking: {
              serviceType: '‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
              description: '‡∏≠‡∏ö‡∏£‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ISO 9001',
              priority: 'MEDIUM',
            },
          },
          status: 'PROCESSED',
          processedAt: new Date('2024-01-18T14:31:00Z'),
          createdJobId: jobs[1].id,
        },
      }),
    ]);

    console.log(`‚úÖ Created ${webhookLogs.length} webhook logs`);

    // =======================================================================
    // SUMMARY
    // =======================================================================
    console.log('\nüéâ Seed data generation completed successfully!');
    console.log('üìä Summary:');
    console.log(`   üë• Users: ${1 + operationsUsers.length + 2}`);
    console.log(`   üè¢ Customers: ${customers.length}`);
    console.log(`   üìã Quality Checklists: ${checklists.length}`);
    console.log(`   üíº Jobs: ${jobs.length}`);
    console.log(`   ‚úÖ Quality Checks: ${qualityChecks.length}`);
    console.log(`   üéì Training Workflows: ${trainingWorkflows.length}`);
    console.log(`   üì° Webhook Logs: ${webhookLogs.length}`);
    console.log('\nüöÄ Tinedy CRM is ready for development!');

  } catch (error) {
    console.error('‚ùå Error during seed data generation:', error);
    throw error;
  }
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

// ==========================================================================
// UTILITY FUNCTIONS
// ==========================================================================

/**
 * Generate random Thai company names
 */
function generateCompanyName(): string {
  const prefixes = ['‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô', '‡∏£‡πâ‡∏≤‡∏ô', '‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô', '‡∏®‡∏π‡∏ô‡∏¢‡πå'];
  const names = ['ABC', 'XYZ', 'DEF', 'GHI', 'JKL', 'MNO', 'PQR', 'STU'];
  const suffixes = ['‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)', '‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°', '‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'];

  const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
  const name = names[Math.floor(Math.random() * names.length)];
  const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];

  return `${prefix} ${name} ${suffix}`;
}

/**
 * Generate random LINE User ID
 */
function generateLineUserId(): string {
  const chars = '0123456789abcdef';
  let result = 'U';
  for (let i = 0; i < 32; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

/**
 * Generate random phone number
 */
function generatePhoneNumber(): string {
  const prefixes = ['+66-2', '+66-81', '+66-82', '+66-83'];
  const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
  const number = Math.floor(Math.random() * 9000000) + 1000000;
  return `${prefix}-${number.toString().slice(0, 3)}-${number.toString().slice(3)}`;
}

export { generateCompanyName, generateLineUserId, generatePhoneNumber };