// Prisma Model Template for Tinedy CRM
// This template provides complete schema for the CRM system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// ENUMS
// =============================================================================

enum CustomerStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum JobStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum UserRole {
  ADMIN
  OPERATIONS
  TRAINING
  QC_MANAGER
}

enum QCStatus {
  PENDING
  IN_PROGRESS
  PASSED
  FAILED
  NEEDS_REVIEW
}

enum TrainingStatus {
  AWAITING_DOCUMENTS
  DOCUMENTS_RECEIVED
  TRAINING_IN_PROGRESS
  TRAINING_COMPLETED
  COMPLETED
}

enum WebhookStatus {
  RECEIVED
  PROCESSING
  PROCESSED
  FAILED
  RETRY_NEEDED
}

// =============================================================================
// CORE BUSINESS ENTITIES
// =============================================================================

model Customer {
  id          String         @id @default(cuid())
  lineUserId  String?        @unique // LINE OA integration
  name        String
  phone       String?
  email       String?
  address     String?
  notes       String?
  status      CustomerStatus @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  jobs        Job[]

  // Indexes for performance
  @@index([status])
  @@index([createdAt])
  @@index([lineUserId])
  @@map("customers")
}

model Job {
  id            String      @id @default(cuid())
  customerId    String
  serviceType   String
  description   String?
  status        JobStatus   @default(NEW)
  priority      Priority    @default(MEDIUM)
  scheduledAt   DateTime?
  completedAt   DateTime?
  assignedToId  String?
  n8nWorkflowId String?     // N8N integration reference
  webhookData   Json?       // Raw webhook data from N8N
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  customer      Customer          @relation(fields: [customerId], references: [id], onDelete: Restrict)
  assignedTo    User?             @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  qualityChecks QualityCheck[]
  training      TrainingWorkflow?
  webhookLogs   WebhookLog[]

  // Indexes for performance
  @@index([customerId])
  @@index([status])
  @@index([assignedToId])
  @@index([scheduledAt])
  @@index([createdAt])
  @@index([customerId, status]) // Composite index for customer job queries
  @@index([assignedToId, status]) // Composite index for assigned job queries
  @@map("jobs")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(OPERATIONS)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedJobs Job[]

  // Indexes
  @@index([role])
  @@index([isActive])
  @@map("users")
}

// =============================================================================
// QUALITY CONTROL SYSTEM
// =============================================================================

model QualityCheck {
  id          String           @id @default(cuid())
  jobId       String
  checklistId String
  status      QCStatus         @default(PENDING)
  completedBy String?
  completedAt DateTime?
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  job         Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  checklist   QualityChecklist @relation(fields: [checklistId], references: [id], onDelete: Restrict)

  // Indexes
  @@index([jobId])
  @@index([status])
  @@index([createdAt])
  @@map("quality_checks")
}

model QualityChecklist {
  id          String         @id @default(cuid())
  name        String
  description String?
  items       Json           // Checklist items as JSON array
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  qualityChecks QualityCheck[]

  // Indexes
  @@index([isActive])
  @@map("quality_checklists")
}

// =============================================================================
// TRAINING WORKFLOW SYSTEM
// =============================================================================

model TrainingWorkflow {
  id                String          @id @default(cuid())
  jobId             String          @unique
  status            TrainingStatus  @default(AWAITING_DOCUMENTS)
  documentsReceived Boolean         @default(false)
  trainingCompleted Boolean         @default(false)
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  job               Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([status])
  @@index([createdAt])
  @@map("training_workflows")
}

// =============================================================================
// WEBHOOK & INTEGRATION SYSTEM
// =============================================================================

model WebhookLog {
  id            String        @id @default(cuid())
  source        String        // 'N8N', 'LINE_OA', etc.
  workflowId    String?
  executionId   String?
  payload       Json          // Raw webhook payload
  status        WebhookStatus @default(RECEIVED)
  processedAt   DateTime?
  errorMessage  String?
  createdJobId  String?       // Reference to created job
  retryCount    Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  createdJob    Job?          @relation(fields: [createdJobId], references: [id], onDelete: SetNull)

  // Indexes
  @@index([source])
  @@index([status])
  @@index([createdAt])
  @@index([workflowId])
  @@map("webhook_logs")
}

model FailedWebhook {
  id            String    @id @default(cuid())
  originalLogId String
  payload       Json
  errorDetails  String
  failedAt      DateTime  @default(now())
  retryAfter    DateTime?
  manualReview  Boolean   @default(false)

  // Indexes
  @@index([failedAt])
  @@index([manualReview])
  @@map("failed_webhooks")
}

// =============================================================================
// AUDIT & LOGGING SYSTEM (Optional)
// =============================================================================

model AuditLog {
  id        String   @id @default(cuid())
  entityType String  // 'Customer', 'Job', 'User', etc.
  entityId   String
  action     String  // 'CREATE', 'UPDATE', 'DELETE'
  oldValues  Json?
  newValues  Json?
  userId     String?
  timestamp  DateTime @default(now())

  // Indexes
  @@index([entityType, entityId])
  @@index([timestamp])
  @@index([userId])
  @@map("audit_logs")
}

// =============================================================================
// NEXTAUTH.JS TABLES (if using NextAuth.js)
// =============================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Update User model to include NextAuth relations
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(OPERATIONS)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  assignedJobs Job[]
  accounts     Account[]
  sessions     Session[]

  // Indexes
  @@index([role])
  @@index([isActive])
  @@map("users")
}

// =============================================================================
// VIEWS (Create manually after migration)
// =============================================================================

// Example views to create manually:

// Customer Summary View
// CREATE VIEW customer_summary AS
// SELECT
//   c.id,
//   c.name,
//   c.status,
//   COUNT(j.id) as total_jobs,
//   COUNT(CASE WHEN j.status = 'COMPLETED' THEN 1 END) as completed_jobs,
//   MAX(j.createdAt) as last_job_date
// FROM customers c
// LEFT JOIN jobs j ON c.id = j.customerId
// GROUP BY c.id, c.name, c.status;

// Job Dashboard View
// CREATE VIEW job_dashboard AS
// SELECT
//   j.id,
//   j.status,
//   j.priority,
//   j.serviceType,
//   j.scheduledAt,
//   c.name as customer_name,
//   u.name as assigned_to_name,
//   qc.status as qc_status,
//   tw.status as training_status
// FROM jobs j
// JOIN customers c ON j.customerId = c.id
// LEFT JOIN users u ON j.assignedToId = u.id
// LEFT JOIN quality_checks qc ON j.id = qc.jobId
// LEFT JOIN training_workflows tw ON j.id = tw.jobId;

// =============================================================================
// TRIGGERS & FUNCTIONS (Create manually after migration)
// =============================================================================

// Example trigger for audit logging:
// CREATE OR REPLACE FUNCTION audit_trigger()
// RETURNS TRIGGER AS $$
// BEGIN
//   IF TG_OP = 'INSERT' THEN
//     INSERT INTO audit_logs (entity_type, entity_id, action, new_values)
//     VALUES (TG_TABLE_NAME, NEW.id, 'CREATE', row_to_json(NEW));
//     RETURN NEW;
//   ELSIF TG_OP = 'UPDATE' THEN
//     INSERT INTO audit_logs (entity_type, entity_id, action, old_values, new_values)
//     VALUES (TG_TABLE_NAME, NEW.id, 'UPDATE', row_to_json(OLD), row_to_json(NEW));
//     RETURN NEW;
//   ELSIF TG_OP = 'DELETE' THEN
//     INSERT INTO audit_logs (entity_type, entity_id, action, old_values)
//     VALUES (TG_TABLE_NAME, OLD.id, 'DELETE', row_to_json(OLD));
//     RETURN OLD;
//   END IF;
//   RETURN NULL;
// END;
// $$ LANGUAGE plpgsql;

// CREATE TRIGGER jobs_audit AFTER INSERT OR UPDATE OR DELETE ON jobs
// FOR EACH ROW EXECUTE FUNCTION audit_trigger();

// CREATE TRIGGER customers_audit AFTER INSERT OR UPDATE OR DELETE ON customers
// FOR EACH ROW EXECUTE FUNCTION audit_trigger();