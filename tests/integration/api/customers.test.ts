// Customer API Integration Tests
// Generated by Database Agent (Alex)

import { describe, it, expect, beforeEach } from '@jest/globals';
import { TestDatabaseManager, TestUtils, TestAssertions, TEST_CONFIG } from '../../setup/test-config';

const BASE_URL = TEST_CONFIG.api.baseUrl;

describe('Customer API Integration Tests', () => {
  beforeEach(async () => {
    await TestDatabaseManager.reset();
  });

  describe('POST /api/customers', () => {
    it('should create customer with valid data', async () => {
      const customerData = TestUtils.generateCustomerData({
        name: 'สมชาย ใจดี',
        phone: '+66812345678',
        email: 'somchai@example.com'
      });

      const response = await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(customerData)
      });

      expect(response.status).toBe(201);

      const result = await response.json();
      expect(result).toHaveProperty('id');
      expect(result.name).toBe(customerData.name);
      expect(result.phone).toBe(customerData.phone);
      expect(result.email).toBe(customerData.email);
      expect(result.status).toBe('ACTIVE');
      TestAssertions.assertTimestamp(result.createdAt);
    });

    it('should create customer with minimal data', async () => {
      const customerData = {
        name: 'ลูกค้าขั้นต่ำ'
      };

      const response = await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(customerData)
      });

      expect(response.status).toBe(201);

      const result = await response.json();
      expect(result.name).toBe(customerData.name);
      expect(result.phone).toBeNull();
      expect(result.email).toBeNull();
    });

    it('should reject invalid customer data', async () => {
      const invalidData = {
        name: '', // Empty name
        phone: 'invalid-phone',
        email: 'invalid-email'
      };

      const response = await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(invalidData)
      });

      expect(response.status).toBe(400);

      const result = await response.json();
      TestAssertions.assertValidationError(result);
      expect(result.details).toBeDefined();
    });

    it('should reject duplicate LINE User ID', async () => {
      const lineUserId = TestUtils.randomLineUserId();

      // Create first customer
      const customer1 = TestUtils.generateCustomerData({
        name: 'ลูกค้า 1',
        lineUserId
      });

      await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(customer1)
      });

      // Try to create second customer with same LINE User ID
      const customer2 = TestUtils.generateCustomerData({
        name: 'ลูกค้า 2',
        lineUserId
      });

      const response = await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(customer2)
      });

      expect(response.status).toBe(400);
    });

    it('should validate Thai phone number format', async () => {
      const validPhones = ['+66812345678', '0812345678'];
      const invalidPhones = ['123456', '+1234567890', 'phone'];

      for (const phone of validPhones) {
        const customerData = TestUtils.generateCustomerData({ phone });

        const response = await fetch(`${BASE_URL}/api/customers`, {
          method: 'POST',
          headers: TestUtils.createHeaders(),
          body: JSON.stringify(customerData)
        });

        expect(response.status).toBe(201);
      }

      for (const phone of invalidPhones) {
        const customerData = TestUtils.generateCustomerData({ phone });

        const response = await fetch(`${BASE_URL}/api/customers`, {
          method: 'POST',
          headers: TestUtils.createHeaders(),
          body: JSON.stringify(customerData)
        });

        expect(response.status).toBe(400);
      }
    });
  });

  describe('GET /api/customers', () => {
    beforeEach(async () => {
      // Create test customers
      const customers = [
        TestUtils.generateCustomerData({ name: 'สมชาย ใจดี', status: 'ACTIVE' }),
        TestUtils.generateCustomerData({ name: 'สมหญิง ดีใจ', status: 'ACTIVE' }),
        TestUtils.generateCustomerData({ name: 'อนันต์ มั่นคง', status: 'INACTIVE' })
      ];

      for (const customer of customers) {
        await fetch(`${BASE_URL}/api/customers`, {
          method: 'POST',
          headers: TestUtils.createHeaders(),
          body: JSON.stringify(customer)
        });
      }
    });

    it('should get all customers', async () => {
      const response = await fetch(`${BASE_URL}/api/customers`, {
        headers: TestUtils.createHeaders()
      });

      expect(response.status).toBe(200);

      const result = await response.json();
      TestAssertions.assertPaginationResponse(result);
      expect(result.data).toHaveLength(3);
    });

    it('should filter customers by status', async () => {
      const response = await fetch(`${BASE_URL}/api/customers?status=ACTIVE`, {
        headers: TestUtils.createHeaders()
      });

      expect(response.status).toBe(200);

      const result = await response.json();
      expect(result.data).toHaveLength(2);
      result.data.forEach((customer: any) => {
        expect(customer.status).toBe('ACTIVE');
      });
    });

    it('should search customers by name', async () => {
      const response = await fetch(`${BASE_URL}/api/customers?search=สม`, {
        headers: TestUtils.createHeaders()
      });

      expect(response.status).toBe(200);

      const result = await response.json();
      expect(result.data).toHaveLength(2);
      result.data.forEach((customer: any) => {
        expect(customer.name).toContain('สม');
      });
    });

    it('should paginate customers', async () => {
      const response = await fetch(`${BASE_URL}/api/customers?page=1&limit=2`, {
        headers: TestUtils.createHeaders()
      });

      expect(response.status).toBe(200);

      const result = await response.json();
      expect(result.data).toHaveLength(2);
      expect(result.pagination.page).toBe(1);
      expect(result.pagination.limit).toBe(2);
      expect(result.pagination.total).toBe(3);
    });

    it('should sort customers by name', async () => {
      const response = await fetch(`${BASE_URL}/api/customers?sortBy=name&sortOrder=asc`, {
        headers: TestUtils.createHeaders()
      });

      expect(response.status).toBe(200);

      const result = await response.json();
      const names = result.data.map((customer: any) => customer.name);
      const sortedNames = [...names].sort();
      expect(names).toEqual(sortedNames);
    });
  });

  describe('GET /api/customers/:id', () => {
    let testCustomer: any;

    beforeEach(async () => {
      const customerData = TestUtils.generateCustomerData({
        name: 'ลูกค้าทดสอบ'
      });

      const response = await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(customerData)
      });

      testCustomer = await response.json();
    });

    it('should get customer by ID', async () => {
      const response = await fetch(`${BASE_URL}/api/customers/${testCustomer.id}`, {
        headers: TestUtils.createHeaders()
      });

      expect(response.status).toBe(200);

      const result = await response.json();
      expect(result.id).toBe(testCustomer.id);
      expect(result.name).toBe(testCustomer.name);
    });

    it('should get customer with jobs', async () => {
      const response = await fetch(`${BASE_URL}/api/customers/${testCustomer.id}?include=jobs`, {
        headers: TestUtils.createHeaders()
      });

      expect(response.status).toBe(200);

      const result = await response.json();
      expect(result).toHaveProperty('jobs');
      expect(Array.isArray(result.jobs)).toBe(true);
    });

    it('should return 404 for non-existent customer', async () => {
      const response = await fetch(`${BASE_URL}/api/customers/non-existent-id`, {
        headers: TestUtils.createHeaders()
      });

      expect(response.status).toBe(404);

      const result = await response.json();
      expect(result).toHaveProperty('error');
    });
  });

  describe('PUT /api/customers/:id', () => {
    let testCustomer: any;

    beforeEach(async () => {
      const customerData = TestUtils.generateCustomerData({
        name: 'ลูกค้าเดิม',
        phone: '+66812345678'
      });

      const response = await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(customerData)
      });

      testCustomer = await response.json();
    });

    it('should update customer information', async () => {
      const updateData = {
        name: 'ชื่อใหม่',
        phone: '+66898765432',
        email: 'new@example.com'
      };

      const response = await fetch(`${BASE_URL}/api/customers/${testCustomer.id}`, {
        method: 'PUT',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(updateData)
      });

      expect(response.status).toBe(200);

      const result = await response.json();
      expect(result.name).toBe(updateData.name);
      expect(result.phone).toBe(updateData.phone);
      expect(result.email).toBe(updateData.email);
      expect(new Date(result.updatedAt).getTime()).toBeGreaterThan(
        new Date(testCustomer.updatedAt).getTime()
      );
    });

    it('should update customer status', async () => {
      const updateData = { status: 'INACTIVE' };

      const response = await fetch(`${BASE_URL}/api/customers/${testCustomer.id}`, {
        method: 'PUT',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(updateData)
      });

      expect(response.status).toBe(200);

      const result = await response.json();
      expect(result.status).toBe('INACTIVE');
    });

    it('should validate status transitions', async () => {
      // Valid transition
      const validUpdate = { status: 'BLOCKED' };

      const response1 = await fetch(`${BASE_URL}/api/customers/${testCustomer.id}`, {
        method: 'PUT',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(validUpdate)
      });

      expect(response1.status).toBe(200);
    });

    it('should reject invalid update data', async () => {
      const invalidData = {
        phone: 'invalid-phone',
        email: 'invalid-email'
      };

      const response = await fetch(`${BASE_URL}/api/customers/${testCustomer.id}`, {
        method: 'PUT',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(invalidData)
      });

      expect(response.status).toBe(400);
      TestAssertions.assertValidationError(await response.json());
    });
  });

  describe('DELETE /api/customers/:id', () => {
    let testCustomer: any;

    beforeEach(async () => {
      const customerData = TestUtils.generateCustomerData();

      const response = await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(customerData)
      });

      testCustomer = await response.json();
    });

    it('should delete customer without jobs', async () => {
      const response = await fetch(`${BASE_URL}/api/customers/${testCustomer.id}`, {
        method: 'DELETE',
        headers: TestUtils.createHeaders()
      });

      expect(response.status).toBe(204);

      // Verify customer is deleted
      const getResponse = await fetch(`${BASE_URL}/api/customers/${testCustomer.id}`, {
        headers: TestUtils.createHeaders()
      });

      expect(getResponse.status).toBe(404);
    });

    it('should prevent deletion of customer with jobs', async () => {
      // Create a job for the customer
      const jobData = TestUtils.generateJobData(testCustomer.id);

      await fetch(`${BASE_URL}/api/jobs`, {
        method: 'POST',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(jobData)
      });

      const response = await fetch(`${BASE_URL}/api/customers/${testCustomer.id}`, {
        method: 'DELETE',
        headers: TestUtils.createHeaders()
      });

      expect(response.status).toBe(400);

      const result = await response.json();
      expect(result.error).toContain('jobs');
    });
  });

  describe('Customer API Performance', () => {
    it('should handle customer creation within time limit', async () => {
      const customerData = TestUtils.generateCustomerData();

      const { duration } = await TestUtils.measureTime(async () => {
        const response = await fetch(`${BASE_URL}/api/customers`, {
          method: 'POST',
          headers: TestUtils.createHeaders(),
          body: JSON.stringify(customerData)
        });
        return response.json();
      });

      TestAssertions.assertPerformance(duration, 1000);
    });

    it('should handle customer search efficiently', async () => {
      // Create multiple customers
      const customers = Array.from({ length: 10 }, (_, i) =>
        TestUtils.generateCustomerData({
          name: `ลูกค้า ${i + 1}`,
          email: `customer${i + 1}@test.com`
        })
      );

      for (const customer of customers) {
        await fetch(`${BASE_URL}/api/customers`, {
          method: 'POST',
          headers: TestUtils.createHeaders(),
          body: JSON.stringify(customer)
        });
      }

      const { duration } = await TestUtils.measureTime(async () => {
        const response = await fetch(`${BASE_URL}/api/customers?search=ลูกค้า`, {
          headers: TestUtils.createHeaders()
        });
        return response.json();
      });

      TestAssertions.assertPerformance(duration, 800);
    });
  });

  describe('Customer API Error Handling', () => {
    it('should handle malformed JSON', async () => {
      const response = await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: TestUtils.createHeaders(),
        body: 'invalid json'
      });

      expect(response.status).toBe(400);

      const result = await response.json();
      expect(result.error).toContain('JSON');
    });

    it('should handle missing content-type header', async () => {
      const response = await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: { 'Accept': 'application/json' },
        body: JSON.stringify(TestUtils.generateCustomerData())
      });

      // Should still work or return appropriate error
      expect([200, 201, 400]).toContain(response.status);
    });

    it('should handle large request payload', async () => {
      const customerData = TestUtils.generateCustomerData({
        notes: 'x'.repeat(5000) // Very long notes
      });

      const response = await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(customerData)
      });

      expect([201, 400, 413]).toContain(response.status);
    });
  });

  describe('Customer API Security', () => {
    it('should require authentication for protected endpoints', async () => {
      const response = await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(TestUtils.generateCustomerData())
      });

      // Should require authentication (assuming auth is implemented)
      expect([401, 403, 201]).toContain(response.status);
    });

    it('should sanitize response data', async () => {
      const customerData = TestUtils.generateCustomerData({
        notes: '<script>alert("xss")</script>'
      });

      const response = await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(customerData)
      });

      if (response.status === 201) {
        const result = await response.json();
        // Should not contain script tags in response
        expect(JSON.stringify(result)).not.toContain('<script>');
      }
    });

    it('should handle SQL injection attempts', async () => {
      const maliciousData = TestUtils.generateCustomerData({
        name: "'; DROP TABLE customers; --",
        email: "admin'; UPDATE customers SET status='ACTIVE'; --"
      });

      const response = await fetch(`${BASE_URL}/api/customers`, {
        method: 'POST',
        headers: TestUtils.createHeaders(),
        body: JSON.stringify(maliciousData)
      });

      // Should be caught by validation
      expect(response.status).toBe(400);
    });
  });
});