#!/usr/bin/env tsx

/**
 * =============================================================================
 * TINEDY CRM - DATABASE SETUP SCRIPT
 * =============================================================================
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
 * ‡∏£‡∏±‡∏ô: npm run db:setup ‡∏´‡∏£‡∏∑‡∏≠ tsx scripts/setup-database.ts
 */

import { exec } from 'child_process'
import { promisify } from 'util'
import {
  checkDatabaseConnection,
  checkMigrationStatus,
  getDatabaseStats
} from '../lib/db'

const execAsync = promisify(exec)

/**
 * ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö console output
 */
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
}

function colorLog(color: keyof typeof colors, message: string) {
  console.log(`${colors[color]}${message}${colors.reset}`)
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
 */
function checkEnvironmentVariables() {
  colorLog('blue', 'üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables...')

  const requiredVars = ['DATABASE_URL']
  const missingVars: string[] = []

  for (const varName of requiredVars) {
    if (!process.env[varName]) {
      missingVars.push(varName)
    }
  }

  if (missingVars.length > 0) {
    colorLog('red', `‚ùå ‡∏Ç‡∏≤‡∏î Environment Variables: ${missingVars.join(', ')}`)
    colorLog('yellow', 'üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env.local ‡∏´‡∏£‡∏∑‡∏≠ environment ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
    process.exit(1)
  }

  colorLog('green', '‚úÖ Environment Variables ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')
}

/**
 * ‡∏£‡∏±‡∏ô Prisma command ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
 */
async function runPrismaCommand(command: string, description: string) {
  try {
    colorLog('blue', `üîÑ ${description}...`)
    const { stdout, stderr } = await execAsync(`npx prisma ${command}`)

    if (stderr && !stderr.includes('warning')) {
      colorLog('yellow', `‚ö†Ô∏è  ${stderr}`)
    }

    if (stdout) {
      console.log(stdout)
    }

    colorLog('green', `‚úÖ ${description} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô`)
  } catch (error) {
    colorLog('red', `‚ùå ${description} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß`)
    if (error instanceof Error) {
      console.error(error.message)
    }
    throw error
  }
}

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
 */
async function setupDatabase() {
  try {
    colorLog('magenta', 'üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Tinedy CRM')
    colorLog('cyan', '='.repeat(60))

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables
    checkEnvironmentVariables()

    // 2. Generate Prisma Client
    await runPrismaCommand('generate', '‡∏™‡∏£‡πâ‡∏≤‡∏á Prisma Client')

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    colorLog('blue', 'üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...')
    const dbConnected = await checkDatabaseConnection()

    if (!dbConnected) {
      colorLog('red', '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ')
      colorLog('yellow', 'üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DATABASE_URL ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á database server')
      process.exit(1)
    }

    colorLog('green', '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ migrations
    colorLog('blue', 'üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ migrations...')
    const migrationStatus = await checkMigrationStatus()

    if (!migrationStatus.migrated) {
      colorLog('yellow', '‚ö†Ô∏è  ‡∏û‡∏ö migrations ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ô')

      // 5. ‡∏£‡∏±‡∏ô migrations
      await runPrismaCommand('migrate deploy', '‡∏£‡∏±‡∏ô Database Migrations')
    } else {
      colorLog('green', '‚úÖ Migrations ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏£‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß')
    }

    // 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    colorLog('blue', 'üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...')
    const stats = await getDatabaseStats()

    colorLog('cyan', 'üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:')
    console.log(`   üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${stats.users} ‡∏Ñ‡∏ô`)
    console.log(`   üè† ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${stats.customers} ‡∏£‡∏≤‡∏¢`)
    console.log(`   üìã ‡∏á‡∏≤‡∏ô: ${stats.jobs} ‡∏á‡∏≤‡∏ô`)
    console.log(`   ‚ö° ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${stats.activeJobs} ‡∏á‡∏≤‡∏ô`)

    // 7. Seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    if (stats.users === 0) {
      colorLog('yellow', 'üìù ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...')
      await runPrismaCommand('db seed', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô')

      // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á seed
      const newStats = await getDatabaseStats()
      colorLog('cyan', 'üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á seed:')
      console.log(`   üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${newStats.users} ‡∏Ñ‡∏ô`)
      console.log(`   üè† ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${newStats.customers} ‡∏£‡∏≤‡∏¢`)
      console.log(`   üìã ‡∏á‡∏≤‡∏ô: ${newStats.jobs} ‡∏á‡∏≤‡∏ô`)
    } else {
      colorLog('green', '‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß')
    }

    // 8. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    colorLog('cyan', '='.repeat(60))
    colorLog('green', 'üéâ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!')
    colorLog('cyan', '\nüìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:')
    console.log('   1. ‡∏£‡∏±‡∏ô npm run dev ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô development server')
    console.log('   2. ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà http://localhost:3000/api/health ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞')
    console.log('   3. ‡∏£‡∏±‡∏ô npm run db:studio ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')

    if (stats.users === 0) {
      colorLog('cyan', '\nüîë ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö:')
      console.log('   Admin: admin@tinedy.com / admin123')
      console.log('   Operations: operations1@tinedy.com / ops123')
    }

  } catch (error) {
    colorLog('red', '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    console.error(error)
    process.exit(1)
  }
}

/**
 * ‡∏£‡∏±‡∏ô script ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
 */
if (require.main === module) {
  setupDatabase()
}