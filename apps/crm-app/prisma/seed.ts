import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£ Seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tinedy CRM...')

  // =============================================================================
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (Users)
  // =============================================================================

  const hashedPassword = await bcrypt.hash('admin123', 12)
  const operationsPassword = await bcrypt.hash('ops123', 12)
  const trainingPassword = await bcrypt.hash('training123', 12)
  const qcPassword = await bcrypt.hash('qc123', 12)

  // Admin User
  const admin = await prisma.user.upsert({
    where: { email: 'admin@tinedy.com' },
    update: {},
    create: {
      email: 'admin@tinedy.com',
      name: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
      password: hashedPassword,
      role: 'ADMIN',
    },
  })

  // Operations Users
  const operationsUser1 = await prisma.user.upsert({
    where: { email: 'operations1@tinedy.com' },
    update: {},
    create: {
      email: 'operations1@tinedy.com',
      name: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ 1',
      password: operationsPassword,
      role: 'OPERATIONS',
    },
  })

  const operationsUser2 = await prisma.user.upsert({
    where: { email: 'operations2@tinedy.com' },
    update: {},
    create: {
      email: 'operations2@tinedy.com',
      name: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ 2',
      password: operationsPassword,
      role: 'OPERATIONS',
    },
  })

  // Training Team User
  const trainingUser = await prisma.user.upsert({
    where: { email: 'training@tinedy.com' },
    update: {},
    create: {
      email: 'training@tinedy.com',
      name: '‡∏ó‡∏µ‡∏°‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°',
      password: trainingPassword,
      role: 'TRAINING',
    },
  })

  // QC Manager
  const qcManager = await prisma.user.upsert({
    where: { email: 'qc@tinedy.com' },
    update: {},
    create: {
      email: 'qc@tinedy.com',
      name: '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û',
      password: qcPassword,
      role: 'QC_MANAGER',
    },
  })

  console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')

  // =============================================================================
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (Sample Customers)
  // =============================================================================

  const customers = await Promise.all([
    prisma.customer.upsert({
      where: { phone: '0812345678' },
      update: {},
      create: {
        name: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
        phone: '0812345678',
        address: '123 ‡∏ñ.‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡πÅ‡∏Ç‡∏ß‡∏á‡∏Ñ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ô ‡πÄ‡∏Ç‡∏ï‡∏ß‡∏±‡∏í‡∏ô‡∏≤ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
        contactChannel: 'LINE_OA',
        status: 'ACTIVE',
      },
    }),
    prisma.customer.upsert({
      where: { phone: '0823456789' },
      update: {},
      create: {
        name: '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏•‡∏µ ‡∏£‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
        phone: '0823456789',
        address: '456 ‡∏ñ.‡∏û‡∏´‡∏•‡πÇ‡∏¢‡∏ò‡∏¥‡∏ô ‡πÅ‡∏Ç‡∏ß‡∏á‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡πÄ‡∏Ç‡∏ï‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10900',
        contactChannel: 'LINE_OA',
        status: 'ACTIVE',
      },
    }),
    prisma.customer.upsert({
      where: { phone: '0834567890' },
      update: {},
      create: {
        name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ABC ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
        phone: '0834567890',
        address: '789 ‡∏ñ.‡∏™‡∏≤‡∏ò‡∏£‡πÉ‡∏ï‡πâ ‡πÅ‡∏Ç‡∏ß‡∏á‡∏ó‡∏∏‡πà‡∏á‡∏°‡∏´‡∏≤‡πÄ‡∏°‡∏Ü ‡πÄ‡∏Ç‡∏ï‡∏™‡∏≤‡∏ò‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10120',
        contactChannel: 'PHONE',
        status: 'ACTIVE',
      },
    }),
  ])

  console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')

  // =============================================================================
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Quality Checklists
  // =============================================================================

  const generalServiceChecklist = await prisma.qualityChecklist.upsert({
    where: { name: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ' },
    update: {},
    create: {
      name: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
      description: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
      items: [
        { id: 1, text: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå', required: true },
        { id: 2, text: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', required: true },
        { id: 3, text: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô', required: true },
        { id: 4, text: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö', required: true },
        { id: 5, text: '‡∏£‡∏±‡∏ö‡∏ü‡∏µ‡∏î‡πÅ‡∏ö‡πá‡∏Ñ‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', required: false },
      ],
      isActive: true,
    },
  })

  const cleaningServiceChecklist = await prisma.qualityChecklist.upsert({
    where: { name: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î' },
    update: {},
    create: {
      name: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î',
      description: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î',
      items: [
        { id: 1, text: '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î', required: true },
        { id: 2, text: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î', required: true },
        { id: 3, text: '‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°', required: true },
        { id: 4, text: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô', required: true },
        { id: 5, text: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô', required: true },
        { id: 6, text: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', required: true },
      ],
      isActive: true,
    },
  })

  console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Quality Checklists ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')

  // =============================================================================
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (Sample Jobs)
  // =============================================================================

  const jobs = await Promise.all([
    prisma.job.create({
      data: {
        customerId: customers[0].id,
        serviceType: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ö‡πâ‡∏≤‡∏ô',
        description: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ö‡πâ‡∏≤‡∏ô 3 ‡∏ä‡∏±‡πâ‡∏ô ‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏û‡∏∑‡πâ‡∏ô ‡πÄ‡∏ä‡πá‡∏î‡∏ù‡∏∏‡πà‡∏ô ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö',
        status: 'NEW',
        priority: 'MEDIUM',
        scheduledAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // ‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ
        n8nWorkflowId: 'workflow_001',
        webhookData: {
          source: 'LINE_OA',
          messageId: 'msg_001',
          timestamp: new Date().toISOString(),
        },
      },
    }),
    prisma.job.create({
      data: {
        customerId: customers[1].id,
        serviceType: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°',
        description: '‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô',
        status: 'IN_PROGRESS',
        priority: 'HIGH',
        assignedToId: operationsUser1.id,
        scheduledAt: new Date(Date.now() + 2 * 60 * 60 * 1000), // 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        n8nWorkflowId: 'workflow_002',
        webhookData: {
          source: 'LINE_OA',
          messageId: 'msg_002',
          timestamp: new Date().toISOString(),
        },
      },
    }),
    prisma.job.create({
      data: {
        customerId: customers[2].id,
        serviceType: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏ß‡∏ô',
        description: '‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á‡πÑ‡∏°‡πâ ‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢',
        status: 'COMPLETED',
        priority: 'LOW',
        assignedToId: operationsUser2.id,
        scheduledAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô
        completedAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
        n8nWorkflowId: 'workflow_003',
        webhookData: {
          source: 'PHONE',
          callId: 'call_001',
          timestamp: new Date().toISOString(),
        },
      },
    }),
  ])

  console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')

  // =============================================================================
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Quality Checks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
  // =============================================================================

  await prisma.qualityCheck.create({
    data: {
      jobId: jobs[2].id, // ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
      checklistId: cleaningServiceChecklist.id,
      status: 'PASSED',
      completedBy: qcManager.id,
      completedAt: new Date(Date.now() - 1 * 60 * 60 * 1000), // 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
      notes: '‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏≠‡πÉ‡∏à',
    },
  })

  console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Quality Checks ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')

  // =============================================================================
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Training Workflow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
  // =============================================================================

  await prisma.trainingWorkflow.create({
    data: {
      jobId: jobs[1].id, // ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
      status: 'TRAINING_IN_PROGRESS',
      documentsReceived: true,
      trainingCompleted: false,
      notes: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà',
    },
  })

  console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Training Workflows ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')

  // =============================================================================
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Webhook Logs ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
  // =============================================================================

  await Promise.all([
    prisma.webhookLog.create({
      data: {
        source: 'N8N',
        workflowId: 'workflow_001',
        executionId: 'exec_001',
        payload: {
          type: 'booking_created',
          customer: { name: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', phone: '0812345678' },
          service: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ö‡πâ‡∏≤‡∏ô',
          scheduledAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        },
        status: 'PROCESSED',
        processedAt: new Date(),
        createdJobId: jobs[0].id,
      },
    }),
    prisma.webhookLog.create({
      data: {
        source: 'LINE_OA',
        workflowId: 'line_workflow_001',
        executionId: 'line_exec_001',
        payload: {
          type: 'message_received',
          userId: 'U1234567890',
          message: '‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î',
          timestamp: new Date().toISOString(),
        },
        status: 'PROCESSED',
        processedAt: new Date(),
        createdJobId: jobs[1].id,
      },
    }),
  ])

  console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Webhook Logs ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')

  // =============================================================================
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Audit Logs ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
  // =============================================================================

  await Promise.all([
    prisma.auditLog.create({
      data: {
        entityType: 'Job',
        entityId: jobs[1].id,
        action: 'STATUS_CHANGE',
        oldValues: { status: 'NEW' },
        newValues: { status: 'IN_PROGRESS' },
        userId: admin.id,
      },
    }),
    prisma.auditLog.create({
      data: {
        entityType: 'Job',
        entityId: jobs[2].id,
        action: 'ASSIGNMENT',
        oldValues: { assignedToId: null },
        newValues: { assignedToId: operationsUser2.id },
        userId: admin.id,
      },
    }),
  ])

  console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Audit Logs ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')

  // =============================================================================
  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£ Seed
  // =============================================================================

  const summary = {
    users: await prisma.user.count(),
    customers: await prisma.customer.count(),
    jobs: await prisma.job.count(),
    qualityChecklists: await prisma.qualityChecklist.count(),
    qualityChecks: await prisma.qualityCheck.count(),
    trainingWorkflows: await prisma.trainingWorkflow.count(),
    webhookLogs: await prisma.webhookLog.count(),
    auditLogs: await prisma.auditLog.count(),
  }

  console.log('\nüéâ ‡∏Å‡∏≤‡∏£ Seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!')
  console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:')
  console.log(`   üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${summary.users} ‡∏Ñ‡∏ô`)
  console.log(`   üè† ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${summary.customers} ‡∏£‡∏≤‡∏¢`)
  console.log(`   üìã ‡∏á‡∏≤‡∏ô: ${summary.jobs} ‡∏á‡∏≤‡∏ô`)
  console.log(`   ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: ${summary.qualityChecklists} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
  console.log(`   üîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: ${summary.qualityChecks} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`)
  console.log(`   üìö ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°: ${summary.trainingWorkflows} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`)
  console.log(`   üîó Webhook Logs: ${summary.webhookLogs} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
  console.log(`   üìù Audit Logs: ${summary.auditLogs} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
  console.log('\nüîë ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö:')
  console.log('   Admin: admin@tinedy.com / admin123')
  console.log('   Operations: operations1@tinedy.com / ops123')
  console.log('   Training: training@tinedy.com / training123')
  console.log('   QC Manager: qc@tinedy.com / qc123')
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', e)
    await prisma.$disconnect()
    process.exit(1)
  })
