generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id             String         @id @default(uuid())
  name           String
  phone          String         @unique
  address        String?
  contactChannel String
  status         CustomerStatus @default(ACTIVE)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  jobs           Job[]

  @@index([status])
  @@index([createdAt])
  @@index([name])
  @@index([phone])
  @@index([contactChannel])
  @@index([name, status])
  @@index([phone, status])
  @@index([status, createdAt])
  @@index([contactChannel, status])
  @@map("customers")
}

model Job {
  id             String            @id @default(uuid())
  customerId     String
  serviceType    ServiceType
  scheduledDate  DateTime
  price          Decimal           @db.Decimal(10, 2)
  status         JobStatus         @default(NEW)
  notes          String?
  assignedUserId String?
  description    String?
  priority       Priority          @default(MEDIUM)
  completedAt    DateTime?
  n8nWorkflowId  String?
  webhookData    Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  assignedUser   User?             @relation("AssignedJobs", fields: [assignedUserId], references: [id])
  customer       Customer          @relation(fields: [customerId], references: [id])
  qualityChecks  QualityCheck[]
  training       TrainingWorkflow?
  webhookLogs    WebhookLog[]

  @@index([customerId])
  @@index([status])
  @@index([assignedUserId])
  @@index([scheduledDate])
  @@index([createdAt])
  @@index([priority])
  @@index([serviceType])
  @@index([price])
  @@index([customerId, scheduledDate(sort: Desc)])
  @@index([customerId, status])
  @@index([assignedUserId, status])
  @@index([status, priority])
  @@index([serviceType, status])
  @@index([scheduledDate, status])
  @@index([customerId, serviceType])
  @@map("jobs")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  name         String
  role         UserRole @default(OPERATIONS)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  assignedJobs Job[]    @relation("AssignedJobs")

  @@index([role])
  @@index([isActive])
  @@index([email])
  @@map("users")
}

model QualityCheck {
  id          String           @id @default(cuid())
  jobId       String
  checklistId String
  status      QCStatus         @default(PENDING)
  completedBy String?
  completedAt DateTime?
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  checklist   QualityChecklist @relation(fields: [checklistId], references: [id])
  job         Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([status])
  @@index([createdAt])
  @@index([checklistId])
  @@map("quality_checks")
}

model QualityChecklist {
  id            String         @id @default(cuid())
  name          String
  description   String?
  items         Json
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  qualityChecks QualityCheck[]

  @@index([isActive])
  @@index([name])
  @@map("quality_checklists")
}

model TrainingWorkflow {
  id                String         @id @default(cuid())
  jobId             String         @unique
  status            TrainingStatus @default(AWAITING_DOCUMENTS)
  documentsReceived Boolean        @default(false)
  trainingCompleted Boolean        @default(false)
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  job               Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([createdAt])
  @@map("training_workflows")
}

model WebhookLog {
  id           String        @id @default(cuid())
  source       String
  workflowId   String?
  executionId  String?
  payload      Json
  status       WebhookStatus @default(RECEIVED)
  processedAt  DateTime?
  errorMessage String?
  createdJobId String?
  retryCount   Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  createdJob   Job?          @relation(fields: [createdJobId], references: [id])

  @@index([source])
  @@index([status])
  @@index([createdAt])
  @@index([workflowId])
  @@index([processedAt])
  @@map("webhook_logs")
}

model FailedWebhook {
  id            String    @id @default(cuid())
  originalLogId String
  payload       Json
  errorDetails  String
  failedAt      DateTime  @default(now())
  retryAfter    DateTime?
  manualReview  Boolean   @default(false)

  @@index([failedAt])
  @@index([manualReview])
  @@index([retryAfter])
  @@map("failed_webhooks")
}

model AuditLog {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  action     String
  oldValues  Json?
  newValues  Json?
  userId     String?
  timestamp  DateTime @default(now())

  @@index([entityType, entityId])
  @@index([timestamp])
  @@index([userId])
  @@index([action])
  @@map("audit_logs")
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum ServiceType {
  CLEANING
  TRAINING
}

enum JobStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum UserRole {
  ADMIN
  OPERATIONS
  TRAINING
  QC_MANAGER
}

enum QCStatus {
  PENDING
  IN_PROGRESS
  PASSED
  FAILED
  NEEDS_REVIEW
}

enum TrainingStatus {
  AWAITING_DOCUMENTS
  DOCUMENTS_RECEIVED
  TRAINING_IN_PROGRESS
  TRAINING_COMPLETED
  COMPLETED
}

enum WebhookStatus {
  RECEIVED
  PROCESSING
  PROCESSED
  FAILED
  RETRY_NEEDED
}
