generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  action     String
  oldValues  Json?
  newValues  Json?
  userId     String?
  timestamp  DateTime @default(now())

  @@index([action])
  @@index([entityType, entityId])
  @@index([timestamp])
  @@index([userId])
}

model Customer {
  id             String         @id @default(cuid())
  name           String
  phone          String         @unique
  address        String?
  contactChannel String
  status         CustomerStatus @default(ACTIVE)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  jobs           Job[]

  // Performance-optimized indexes for search patterns
  @@index([name], map: "idx_customer_name")
  @@index([phone], map: "idx_customer_phone")
  @@index([status], map: "idx_customer_status")
  @@index([contactChannel], map: "idx_customer_contact_channel")
  @@index([createdAt], map: "idx_customer_created_at")

  // Compound indexes for common query patterns
  @@index([status, name], map: "idx_customer_status_name")
  @@index([status, phone], map: "idx_customer_status_phone")
  @@index([status, createdAt], map: "idx_customer_status_created_at")
  @@index([contactChannel, status], map: "idx_customer_channel_status")

  // Specialized indexes for text search performance
  @@index([name(sort: Asc), status(sort: Asc)], map: "idx_customer_name_status_search")
  @@index([phone(sort: Asc), status(sort: Asc)], map: "idx_customer_phone_status_search")

  // Index for pagination with consistent sorting
  @@index([createdAt(sort: Desc), id(sort: Desc)], map: "idx_customer_pagination")
}

model FailedWebhook {
  id            String    @id @default(cuid())
  originalLogId String
  payload       Json
  errorDetails  String
  failedAt      DateTime  @default(now())
  retryAfter    DateTime?
  manualReview  Boolean   @default(false)

  @@index([failedAt])
  @@index([manualReview])
  @@index([retryAfter])
}

model Job {
  id                 String              @id @default(cuid())
  customerId         String
  serviceType        ServiceType
  scheduledDate      DateTime
  price              Decimal             @db.Decimal(10, 2)
  status             JobStatus           @default(NEW)
  notes              String?
  assignedUserId     String?
  description        String?
  priority           Priority            @default(MEDIUM)
  completedAt        DateTime?
  n8nWorkflowId      String?
  webhookData        Json?

  // Story 2.5: Quality Control Checklist Management
  checklistTemplateId   String?
  itemStatus           Json?
  checklistCompletedAt DateTime?

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  assignedUser       User?               @relation(fields: [assignedUserId], references: [id])
  customer           Customer            @relation(fields: [customerId], references: [id])
  checklistTemplate  ChecklistTemplate?  @relation("JobChecklistTemplate", fields: [checklistTemplateId], references: [id], onDelete: SetNull)
  qualityChecks      QualityCheck[]
  trainingWorkflow   TrainingWorkflow?
  webhookLogs        WebhookLog[]

  // Primary single-column indexes
  @@index([customerId], map: "idx_job_customer_id")
  @@index([assignedUserId], map: "idx_job_assigned_user_id")
  @@index([status], map: "idx_job_status")
  @@index([serviceType], map: "idx_job_service_type")
  @@index([priority], map: "idx_job_priority")
  @@index([scheduledDate], map: "idx_job_scheduled_date")
  @@index([createdAt], map: "idx_job_created_at")
  @@index([checklistTemplateId], map: "idx_job_checklist_template_id")
  @@index([checklistCompletedAt], map: "idx_job_checklist_completed_at")

  // Performance-optimized compound indexes for common queries
  @@index([status, priority], map: "idx_job_status_priority")
  @@index([status, createdAt(sort: Desc)], map: "idx_job_status_created_at")
  @@index([customerId, status], map: "idx_job_customer_status")
  @@index([customerId, scheduledDate(sort: Desc)], map: "idx_job_customer_scheduled")
  @@index([assignedUserId, status], map: "idx_job_assigned_status")
  @@index([serviceType, status], map: "idx_job_service_status")

  // Advanced compound indexes for complex queries
  @@index([status, priority, scheduledDate(sort: Asc)], map: "idx_job_status_priority_date")
  @@index([customerId, serviceType, status], map: "idx_job_customer_service_status")
  @@index([assignedUserId, status, priority], map: "idx_job_assigned_status_priority")

  // Optimized pagination index
  @@index([createdAt(sort: Desc), id(sort: Desc)], map: "idx_job_pagination")

  // Coverage index for job listing with minimal data
  @@index([status, scheduledDate(sort: Desc), customerId, assignedUserId], map: "idx_job_listing_coverage")
}

// Story 2.5: Unified Checklist Template Model
// Replaces old QualityChecklist - serves both quality control and template purposes
model ChecklistTemplate {
  id             String           @id @default(cuid())
  name           String
  description    String?
  items          Json             // Array of checklist items
  serviceType    ServiceType      @default(CLEANING)
  category       String           @default("QUALITY_CONTROL") // QUALITY_CONTROL, TEMPLATE
  isTemplate     Boolean          @default(false)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Dual-purpose relationships
  qualityChecks     QualityCheck[]           // Existing quality control usage
  jobsUsingTemplate Job[]                    @relation("JobChecklistTemplate") // Story 2.5 usage

  // Performance indexes
  @@index([isActive], map: "idx_checklist_template_is_active")
  @@index([name], map: "idx_checklist_template_name")
  @@index([serviceType], map: "idx_checklist_template_service_type")
  @@index([category], map: "idx_checklist_template_category")
  @@index([isTemplate], map: "idx_checklist_template_is_template")

  // Unique constraint for templates
  @@unique([name, serviceType], map: "checklist_templates_name_serviceType_template_unique")

  @@map("checklist_templates")
}

model QualityCheck {
  id                 String             @id @default(cuid())
  jobId              String
  checklistId        String             // References ChecklistTemplate (renamed from QualityChecklist)
  status             QCStatus           @default(PENDING)
  completedBy        String?
  completedAt        DateTime?
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relations
  checklistTemplate  ChecklistTemplate  @relation(fields: [checklistId], references: [id])
  job                Job                @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([checklistId], map: "idx_quality_check_checklist_id")
  @@index([createdAt], map: "idx_quality_check_created_at")
  @@index([jobId], map: "idx_quality_check_job_id")
  @@index([status], map: "idx_quality_check_status")

  @@map("quality_checks")
}

model TrainingWorkflow {
  id                String         @id @default(cuid())
  jobId             String         @unique
  status            TrainingStatus @default(AWAITING_DOCUMENTS)
  documentsReceived Boolean        @default(false)
  trainingCompleted Boolean        @default(false)
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  job               Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([status])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(OPERATIONS)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobs      Job[]

  @@index([email])
  @@index([isActive])
  @@index([role])
}

model WebhookLog {
  id           String        @id @default(cuid())
  source       String
  workflowId   String?
  executionId  String?
  payload      Json
  status       WebhookStatus @default(RECEIVED)
  processedAt  DateTime?
  errorMessage String?
  createdJobId String?
  retryCount   Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  job          Job?          @relation(fields: [createdJobId], references: [id])

  @@index([createdAt])
  @@index([processedAt])
  @@index([source])
  @@index([status])
  @@index([workflowId])
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum JobStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  DONE
  CANCELLED
  COMPLETED
  ON_HOLD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum QCStatus {
  PENDING
  IN_PROGRESS
  PASSED
  FAILED
  NEEDS_REVIEW
}

enum ServiceType {
  CLEANING
  TRAINING
}

enum TrainingStatus {
  AWAITING_DOCUMENTS
  DOCUMENTS_RECEIVED
  TRAINING_IN_PROGRESS
  TRAINING_COMPLETED
  COMPLETED
}

enum UserRole {
  ADMIN
  OPERATIONS
  TRAINING
  QC_MANAGER
}

enum WebhookStatus {
  RECEIVED
  PROCESSING
  PROCESSED
  FAILED
  RETRY_NEEDED
}
