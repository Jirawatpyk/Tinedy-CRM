// Quick Seed Script for Development
// Generated by Database Agent (Alex)

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Minimal seed data for quick development setup
async function quickSeed() {
  console.log('🚀 Running quick seed for development...\n');

  try {
    // Clean existing data
    await cleanData();

    // Create essential data only
    const admin = await createAdminUser();
    const operationsUser = await createOperationsUser();
    const sampleCustomers = await createSampleCustomers();
    const basicChecklist = await createBasicChecklist();
    const sampleJobs = await createSampleJobs(sampleCustomers, [admin, operationsUser]);

    console.log('\n✅ Quick seed completed!');
    console.log('📊 Created:');
    console.log(`  👥 Users: 2`);
    console.log(`  🏢 Customers: ${sampleCustomers.length}`);
    console.log(`  📋 Checklists: 1`);
    console.log(`  💼 Jobs: ${sampleJobs.length}`);
    console.log('\n🔑 Login credentials:');
    console.log('  Admin: admin@tinedy.com');
    console.log('  Operations: operations@tinedy.com');

  } catch (error) {
    console.error('❌ Quick seed failed:', error);
    throw error;
  }
}

async function cleanData() {
  console.log('🧹 Cleaning existing data...');

  await prisma.auditLog.deleteMany();
  await prisma.webhookLog.deleteMany();
  await prisma.trainingWorkflow.deleteMany();
  await prisma.qualityCheck.deleteMany();
  await prisma.job.deleteMany();
  await prisma.qualityChecklist.deleteMany();
  await prisma.customer.deleteMany();
  await prisma.user.deleteMany();

  console.log('✅ Data cleaned');
}

async function createAdminUser() {
  console.log('👤 Creating admin user...');

  return await prisma.user.create({
    data: {
      id: 'admin-seed',
      email: 'admin@tinedy.com',
      name: 'ผู้ดูแลระบบ',
      role: 'ADMIN',
      isActive: true
    }
  });
}

async function createOperationsUser() {
  console.log('👤 Creating operations user...');

  return await prisma.user.create({
    data: {
      id: 'ops-seed',
      email: 'operations@tinedy.com',
      name: 'พนักงานปฏิบัติการ',
      role: 'OPERATIONS',
      isActive: true
    }
  });
}

async function createSampleCustomers() {
  console.log('🏢 Creating sample customers...');

  const customers = [];

  // Active customer
  customers.push(await prisma.customer.create({
    data: {
      id: 'customer-active',
      lineUserId: 'U1234567890abcdef',
      name: 'บริษัท เทคโนโลยี อินโนเวชั่น จำกัด',
      phone: '+66-2-123-4567',
      email: 'contact@tech-innovation.com',
      address: '123 ถนนสุขุมวิท กรุงเทพฯ 10110',
      status: 'ACTIVE'
    }
  }));

  // Another active customer
  customers.push(await prisma.customer.create({
    data: {
      id: 'customer-active-2',
      lineUserId: 'U0987654321fedcba',
      name: 'ห้างหุ้นส่วน สมาร์ท โซลูชั่น',
      phone: '+66-2-987-6543',
      email: 'info@smart-solution.co.th',
      address: '456 ถนนพหลโยธิน กรุงเทพฯ 10400',
      status: 'ACTIVE'
    }
  }));

  return customers;
}

async function createBasicChecklist() {
  console.log('📋 Creating basic checklist...');

  return await prisma.qualityChecklist.create({
    data: {
      id: 'checklist-basic',
      name: 'มาตรฐานการให้บริการพื้นฐาน',
      description: 'เช็คลิสต์พื้นฐานสำหรับการให้บริการทุกประเภท',
      items: [
        { item: 'ตรวจสอบความถูกต้องของข้อมูลลูกค้า', required: true },
        { item: 'ยืนยันความต้องการของลูกค้า', required: true },
        { item: 'ดำเนินการให้บริการตามมาตรฐาน', required: true },
        { item: 'ตรวจสอบความพึงพอใจของลูกค้า', required: true },
        { item: 'จัดทำเอกสารสรุปการให้บริการ', required: false }
      ],
      isActive: true
    }
  });
}

async function createSampleJobs(customers, users) {
  console.log('💼 Creating sample jobs...');

  const jobs = [];

  // New job
  jobs.push(await prisma.job.create({
    data: {
      id: 'job-new',
      customerId: customers[0].id,
      serviceType: 'การปรึกษาระบบ IT',
      description: 'ปรึกษาการปรับปรุงระบบเทคโนโลยีสำหรับองค์กร',
      status: 'NEW',
      priority: 'HIGH',
      scheduledAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now
      n8nWorkflowId: 'workflow-123'
    }
  }));

  // In progress job
  jobs.push(await prisma.job.create({
    data: {
      id: 'job-progress',
      customerId: customers[1].id,
      assignedToId: users[1].id, // Operations user
      serviceType: 'การฝึกอบรมพนักงาน',
      description: 'อบรมพนักงานเรื่องระบบการจัดการคุณภาพ',
      status: 'IN_PROGRESS',
      priority: 'MEDIUM',
      scheduledAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago
      n8nWorkflowId: 'workflow-124'
    }
  }));

  // Completed job
  jobs.push(await prisma.job.create({
    data: {
      id: 'job-completed',
      customerId: customers[0].id,
      assignedToId: users[1].id, // Operations user
      serviceType: 'การตรวจสอบและประเมินคุณภาพ',
      description: 'ตรวจสอบระบบการจัดการคุณภาพขององค์กร',
      status: 'COMPLETED',
      priority: 'MEDIUM',
      scheduledAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 days ago
      completedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago
      n8nWorkflowId: 'workflow-125'
    }
  }));

  return jobs;
}

// Run quick seed if script is executed directly
if (require.main === module) {
  quickSeed()
    .catch((e) => {
      console.error('Quick seed failed:', e);
      process.exit(1);
    })
    .finally(async () => {
      await prisma.$disconnect();
    });
}

module.exports = quickSeed;